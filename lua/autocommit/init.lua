-- A plugin for creating autocommits while you are working on a project.
-- This plugin works with fugitive.

---@enum Actions
local ACTIONS = {
    SAVE = 0,
    WAIT = 1,
    CUSTOM = 2,
}

---Main return table for autocommit.nvim
---@alias AutoCommit table 
local M = {
    ---@type table
    actions = ACTIONS,
    ---@type table
    commit = {
        ---When to commit.
        ---@type Actions
        when = ACTIONS.SAVE,
        ---@type fun()
        ---@return string
        header = function ()
            return os.date('[Autocommit] - %c')
        end,
        body = function ()
            return 'This was an automatic commit generated by autocommit.nvim.'
        end,
    },
    ---List of events used in custom commit.when
    ---@type {string}
    events = {
        'BufWritePost'
    },
}

---If you use fugitive, you don't need to change this. Otherwise, replace this
---function with M.setup() with a function that uses your git handler to
---write commits.
---@param ... unknown
M.create_commit = function (...)
    vim.cmd([[
    let dir = FugitiveGitDir()
    let _ = FugitiveExecute(["add", "."], dir)
    let _ = FugitiveExecute(["commit", "-m", "]]..M.commit.header()..[[", "-m", "]]..M.commit.body()..[["], dir )
    ]])
end

---Attach the automcommands to Neovim when the hook method is called.
M.hook = function()
    if M.commit.when == ACTIONS.SAVE then
        vim.api.nvim_create_autocmd(
            {'BufWritePost'},
            {
                buffer = 0,
                callback = M.create_commit,
            }
        )
    elseif M.commit.when == ACTIONS.WAIT then -- M.commit.when == ACTIONS.WAIT
        vim.api.nvim_create_autocmd(
            {'CursorHold'},
            {
                buffer = 0,
                callback = M.create_commit,
            }
        )
    else
        vim.api.nvim_create_autocmd(
            M.events,
            {
                buffer = 0,
                callback = M.create_commit,
            }
        )
    end
end

---Setup the autocommit object
---@param config table
---@return table
M.setup = function (config)
    -- recursively copy options from config into M
    M = vim.tbl_deep_extend(
        'force',
        M,
        config
    )

    return M
end

return M
